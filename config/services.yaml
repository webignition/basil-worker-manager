# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    digitalocean_access_token: '%env(DIGITALOCEAN_ACCESS_TOKEN)%'
    digitalocean_droplet_name_prefix: '%env(DIGITALOCEAN_NAME_PREFIX)%'
    digitalocean_droplet_region: '%env(DIGITALOCEAN_REGION)%'
    digitalocean_droplet_size: '%env(DIGITALOCEAN_SIZE)%'
    digitalocean_droplet_image: '%env(DIGITALOCEAN_IMAGE)%'
    create_retry_limit: '%env(CREATE_RETRY_LIMIT)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    DigitalOceanV2\Client:
        class: DigitalOceanV2\Client
        calls:
            - authenticate: ['%digitalocean_access_token%']

    DigitalOceanV2\Api\Droplet:
        class: DigitalOceanV2\Api\Droplet
        arguments:
            $client: '@DigitalOceanV2\Client'

    app.digitalocean.droplet_configuration.default:
        class: App\Model\DigitalOcean\DropletConfiguration
        arguments:
            $region: '%digitalocean_droplet_region%'
            $size: '%digitalocean_droplet_size%'
            $image: '%digitalocean_droplet_image%'

    App\Services\MachineProvider\DigitalOcean\DropletFactory:
        arguments:
            $dropletConfiguration: '@app.digitalocean.droplet_configuration.default'
            $prefix: '%digitalocean_droplet_name_prefix%'

    App\Services\MachineProvider:
        arguments:
            $machineProviders:
                - '@App\Services\MachineProvider\DigitalOcean\DigitalOceanMachineProvider'

    App\Services\CreateFailureRetryDecider:
        arguments:
            $deciders:
                - '@App\Services\CreateFailureRetryDecider\DigitalOcean\DigitalOceanCreateFailureRetryDecider'

    App\Services\CreateMachineHandler:
        arguments:
            $retryLimit: '%create_retry_limit%'