# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    machine_name_prefix: '%env(MACHINE_NAME_PREFIX)%'
    digitalocean_access_token: '%env(DIGITALOCEAN_ACCESS_TOKEN)%'
    digitalocean_droplet_region: '%env(DIGITALOCEAN_REGION)%'
    digitalocean_droplet_size: '%env(DIGITALOCEAN_SIZE)%'
    digitalocean_droplet_image: '%env(DIGITALOCEAN_IMAGE)%'
    digitalocean_droplet_tag: '%env(DIGITALOCEAN_TAG)%'
    create_retry_limit: '%env(CREATE_RETRY_LIMIT)%'
    update_machine_dispatch_delay: '%env(UPDATE_MACHINE_DISPATCH_DELAY)%'
    get_retry_limit: '%env(GET_RETRY_LIMIT)%'
    machine_is_active_dispatch_delay: '%env(MACHINE_IS_ACTIVE_DISPATCH_DELAY)%'
    delete_retry_limit: '%env(DELETE_RETRY_LIMIT)%'
    find_retry_limit: '%env(FIND_RETRY_LIMIT)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Message/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    GuzzleHttp\HandlerStack:
        class: GuzzleHttp\HandlerStack
        factory: ['GuzzleHttp\HandlerStack', 'create']

    GuzzleHttp\Client:
        class: GuzzleHttp\Client
        arguments:
            $config:
                handler: '@GuzzleHttp\HandlerStack'

    DigitalOceanV2\Client:
        class: DigitalOceanV2\Client
        factory: ['DigitalOceanV2\Client', 'createWithHttpClient']
        arguments:
            $httpClient: '@GuzzleHttp\Client'
        calls:
            - authenticate: ['%digitalocean_access_token%']

    DigitalOceanV2\Api\Droplet:
        class: DigitalOceanV2\Api\Droplet

    app.digitalocean.droplet_configuration.default:
        class: App\Model\DigitalOcean\DropletConfiguration
        arguments:
            $region: '%digitalocean_droplet_region%'
            $size: '%digitalocean_droplet_size%'
            $image: '%digitalocean_droplet_image%'
            $tags:
                - '%digitalocean_droplet_tag%'

    App\Services\DigitalOceanMachineManager:
        arguments:
            $dropletConfiguration: '@app.digitalocean.droplet_configuration.default'

    App\Services\MachineManagerStack:
        arguments:
            $machineManagers:
                - '@App\Services\DigitalOceanMachineManager'

    App\Services\MachineNameFactory:
        arguments:
            $environmentPrefix: '%machine_name_prefix%'

    App\Services\RemoteRequestRetryDecider:
        arguments:
            $deciders:
                - '@App\Services\RemoteRequestRetryDecider\DigitalOcean\DigitalOceanRemoteRequestRetryDecider'

    app.message_dispatcher.backoff_strategy.check_machine_is_active:
        class: webignition\SymfonyMessengerMessageDispatcher\Middleware\DelayedMessage\FixedBackoffStrategy
        arguments:
            $delayInMilliseconds: '%machine_is_active_dispatch_delay%'

    app.message_dispatcher.backoff_strategy.find_machine:
        class: webignition\SymfonyMessengerMessageDispatcher\Middleware\DelayedMessage\ExponentialBackoffStrategy

    webignition\SymfonyMessengerMessageDispatcher\Middleware\DelayedMessage\DelayedMessageMiddleware:
        arguments:
            $backoffStrategies:
                App\Message\CheckMachineIsActive: '@app.message_dispatcher.backoff_strategy.check_machine_is_active'
                App\Message\FindMachine: '@app.message_dispatcher.backoff_strategy.find_machine'

    webignition\SymfonyMessengerMessageDispatcher\Middleware\RetryByLimitMiddleware:
        arguments:
            $retryLimits:
                App\Message\CreateMachine: '%create_retry_limit%'
                App\Message\GetMachine: '%get_retry_limit%'
                App\Message\DeleteMachine: '%delete_retry_limit%'
                App\Message\FindMachine: '%find_retry_limit%'

    webignition\SymfonyMessengerMessageDispatcher\MessageDispatcher:
        arguments:
            $middleware:
                - '@webignition\SymfonyMessengerMessageDispatcher\Middleware\DelayedMessage\DelayedMessageMiddleware'
                - '@webignition\SymfonyMessengerMessageDispatcher\Middleware\RetryByLimitMiddleware'

    App\Services\ExceptionFactory\MachineProvider\ExceptionFactory:
        arguments:
            $factories:
                - '@App\Services\ExceptionFactory\MachineProvider\GuzzleExceptionFactory'
